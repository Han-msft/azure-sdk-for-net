// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.AI.Vision.Face
{
    public partial class LivenessWithVerifySessionAuditEntry : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("sessionId"u8);
            writer.WriteStringValue(SessionId);
            writer.WritePropertyName("requestId"u8);
            writer.WriteStringValue(RequestId);
            writer.WritePropertyName("clientRequestId"u8);
            writer.WriteStringValue(ClientRequestId);
            writer.WritePropertyName("receivedDateTime"u8);
            writer.WriteStringValue(ReceivedDateTime, "O");
            writer.WritePropertyName("request"u8);
            writer.WriteObjectValue(Request);
            writer.WritePropertyName("response"u8);
            writer.WriteObjectValue(Response);
            writer.WritePropertyName("digest"u8);
            writer.WriteStringValue(Digest);
            writer.WriteEndObject();
        }

        internal static LivenessWithVerifySessionAuditEntry DeserializeLivenessWithVerifySessionAuditEntry(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            long id = default;
            string sessionId = default;
            string requestId = default;
            string clientRequestId = default;
            DateTimeOffset receivedDateTime = default;
            SessionAuditEntryRequestInfo request = default;
            SessionAuditEntryResponseInfo response = default;
            string digest = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("sessionId"u8))
                {
                    sessionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requestId"u8))
                {
                    requestId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clientRequestId"u8))
                {
                    clientRequestId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("receivedDateTime"u8))
                {
                    receivedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("request"u8))
                {
                    request = SessionAuditEntryRequestInfo.DeserializeSessionAuditEntryRequestInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("response"u8))
                {
                    response = SessionAuditEntryResponseInfo.DeserializeSessionAuditEntryResponseInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("digest"u8))
                {
                    digest = property.Value.GetString();
                    continue;
                }
            }
            return new LivenessWithVerifySessionAuditEntry(id, sessionId, requestId, clientRequestId, receivedDateTime, request, response, digest);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static LivenessWithVerifySessionAuditEntry FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeLivenessWithVerifySessionAuditEntry(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
