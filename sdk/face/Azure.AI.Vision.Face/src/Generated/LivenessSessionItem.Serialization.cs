// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.AI.Vision.Face
{
    public partial class LivenessSessionItem : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("createdDateTime"u8);
            writer.WriteStringValue(CreatedDateTime, "O");
            if (Optional.IsDefined(SessionStartDateTime))
            {
                writer.WritePropertyName("sessionStartDateTime"u8);
                writer.WriteStringValue(SessionStartDateTime.Value, "O");
            }
            writer.WritePropertyName("sessionExpired"u8);
            writer.WriteBooleanValue(SessionExpired);
            writer.WritePropertyName("deviceCorrelationId"u8);
            writer.WriteStringValue(DeviceCorrelationId);
            if (Optional.IsDefined(AuthTokenTimeToLiveInSeconds))
            {
                writer.WritePropertyName("authTokenTimeToLiveInSeconds"u8);
                writer.WriteNumberValue(AuthTokenTimeToLiveInSeconds.Value);
            }
            writer.WritePropertyName("livenessOperationMode"u8);
            writer.WriteStringValue(LivenessOperationMode);
            writer.WriteEndObject();
        }

        internal static LivenessSessionItem DeserializeLivenessSessionItem(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string id = default;
            DateTimeOffset createdDateTime = default;
            Optional<DateTimeOffset> sessionStartDateTime = default;
            bool sessionExpired = default;
            string deviceCorrelationId = default;
            Optional<int> authTokenTimeToLiveInSeconds = default;
            string livenessOperationMode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdDateTime"u8))
                {
                    createdDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("sessionStartDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sessionStartDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("sessionExpired"u8))
                {
                    sessionExpired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("deviceCorrelationId"u8))
                {
                    deviceCorrelationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authTokenTimeToLiveInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    authTokenTimeToLiveInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("livenessOperationMode"u8))
                {
                    livenessOperationMode = property.Value.GetString();
                    continue;
                }
            }
            return new LivenessSessionItem(deviceCorrelationId, Optional.ToNullable(authTokenTimeToLiveInSeconds), livenessOperationMode, id, createdDateTime, Optional.ToNullable(sessionStartDateTime), sessionExpired);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static LivenessSessionItem FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeLivenessSessionItem(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
