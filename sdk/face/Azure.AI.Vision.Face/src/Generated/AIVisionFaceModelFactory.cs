// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Vision.Face
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIVisionFaceModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Face.FaceRectangle"/>. </summary>
        /// <param name="top"> The distance from the top edge if the image to the top edge of the rectangle, in pixels. </param>
        /// <param name="left"> The distance from the left edge if the image to the left edge of the rectangle, in pixels. </param>
        /// <param name="width"> The width of the rectangle, in pixels. </param>
        /// <param name="height"> The height of the rectangle, in pixels. </param>
        /// <returns> A new <see cref="Face.FaceRectangle"/> instance for mocking. </returns>
        public static FaceRectangle FaceRectangle(int top = default, int left = default, int width = default, int height = default)
        {
            return new FaceRectangle(top, left, width, height, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceFindSimilarResult"/>. </summary>
        /// <param name="confidence"> Confidence value of the candidate. The higher confidence, the more similar. Range between [0,1]. </param>
        /// <param name="faceId"> faceId of candidate face when find by faceIds. faceId is created by "Detect" and will expire 24 hours after the detection call. </param>
        /// <param name="persistedFaceId"> persistedFaceId of candidate face when find by faceListId or largeFaceListId. persistedFaceId in face list/large face list is persisted and will not expire. </param>
        /// <returns> A new <see cref="Face.FaceFindSimilarResult"/> instance for mocking. </returns>
        public static FaceFindSimilarResult FaceFindSimilarResult(float confidence = default, string faceId = null, string persistedFaceId = null)
        {
            return new FaceFindSimilarResult(confidence, faceId, persistedFaceId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceIdentificationResult"/>. </summary>
        /// <param name="faceId"> faceId of the query face. </param>
        /// <param name="candidates"> Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array. </param>
        /// <returns> A new <see cref="Face.FaceIdentificationResult"/> instance for mocking. </returns>
        public static FaceIdentificationResult FaceIdentificationResult(string faceId = null, IEnumerable<FaceIdentificationCandidate> candidates = null)
        {
            candidates ??= new List<FaceIdentificationCandidate>();

            return new FaceIdentificationResult(faceId, candidates?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceIdentificationCandidate"/>. </summary>
        /// <param name="personId"> personId of candidate person. </param>
        /// <param name="confidence"> Confidence value of the candidate. The higher confidence, the more similar. Range between [0,1]. </param>
        /// <returns> A new <see cref="Face.FaceIdentificationCandidate"/> instance for mocking. </returns>
        public static FaceIdentificationCandidate FaceIdentificationCandidate(string personId = null, float confidence = default)
        {
            return new FaceIdentificationCandidate(personId, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceVerificationResult"/>. </summary>
        /// <param name="isIdentical"> True if the two faces belong to the same person or the face belongs to the person, otherwise false. </param>
        /// <param name="confidence"> A number indicates the similarity confidence of whether two faces belong to the same person, or whether the face belongs to the person. By default, isIdentical is set to True if similarity confidence is greater than or equal to 0.5. This is useful for advanced users to override 'isIdentical' and fine-tune the result on their own data. </param>
        /// <returns> A new <see cref="Face.FaceVerificationResult"/> instance for mocking. </returns>
        public static FaceVerificationResult FaceVerificationResult(bool isIdentical = default, float confidence = default)
        {
            return new FaceVerificationResult(isIdentical, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceGroupingResult"/>. </summary>
        /// <param name="groups"> A partition of the original faces based on face similarity. Groups are ranked by number of faces. </param>
        /// <param name="messyGroup"> Face ids array of faces that cannot find any similar faces from original faces. </param>
        /// <returns> A new <see cref="Face.FaceGroupingResult"/> instance for mocking. </returns>
        public static FaceGroupingResult FaceGroupingResult(IEnumerable<IList<string>> groups = null, IEnumerable<string> messyGroup = null)
        {
            groups ??= new List<IList<string>>();
            messyGroup ??= new List<string>();

            return new FaceGroupingResult(groups?.ToList(), messyGroup?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceList"/>. </summary>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="recognitionModel"> Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds. </param>
        /// <param name="faceListId"> Valid character is letter in lower case or digit or '-' or '_', maximum length is 64. </param>
        /// <param name="persistedFaces"> Face ids of registered faces in the face list. </param>
        /// <returns> A new <see cref="Face.FaceList"/> instance for mocking. </returns>
        public static FaceList FaceList(string name = null, string userData = null, FaceRecognitionModel? recognitionModel = null, string faceListId = null, IEnumerable<FaceListFace> persistedFaces = null)
        {
            persistedFaces ??= new List<FaceListFace>();

            return new FaceList(
                name,
                userData,
                recognitionModel,
                faceListId,
                persistedFaces?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceListFace"/>. </summary>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="userData"> User-provided data attached to the face. The length limit is 1K. </param>
        /// <returns> A new <see cref="Face.FaceListFace"/> instance for mocking. </returns>
        public static FaceListFace FaceListFace(string persistedFaceId = null, string userData = null)
        {
            return new FaceListFace(persistedFaceId, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceListItem"/>. </summary>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="recognitionModel"> Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds. </param>
        /// <param name="faceListId"> Valid character is letter in lower case or digit or '-' or '_', maximum length is 64. </param>
        /// <returns> A new <see cref="Face.FaceListItem"/> instance for mocking. </returns>
        public static FaceListItem FaceListItem(string name = null, string userData = null, FaceRecognitionModel? recognitionModel = null, string faceListId = null)
        {
            return new FaceListItem(name, userData, recognitionModel, faceListId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.AddFaceResult"/>. </summary>
        /// <param name="persistedFaceId"> Persisted Face ID of the added face, which is persisted and will not expire. Different from faceId which is created in "Detect" and will expire in 24 hours after the detection call. </param>
        /// <returns> A new <see cref="Face.AddFaceResult"/> instance for mocking. </returns>
        public static AddFaceResult AddFaceResult(string persistedFaceId = null)
        {
            return new AddFaceResult(persistedFaceId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LargeFaceList"/>. </summary>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="recognitionModel"> Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds. </param>
        /// <param name="largeFaceListId"> Valid character is letter in lower case or digit or '-' or '_', maximum length is 64. </param>
        /// <returns> A new <see cref="Face.LargeFaceList"/> instance for mocking. </returns>
        public static LargeFaceList LargeFaceList(string name = null, string userData = null, FaceRecognitionModel? recognitionModel = null, string largeFaceListId = null)
        {
            return new LargeFaceList(name, userData, recognitionModel, largeFaceListId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceCollectionTrainingResult"/>. </summary>
        /// <param name="status"> Training status of the container. </param>
        /// <param name="createdDateTime"> A combined UTC date and time string that describes the created time of the person group, large person group or large face list. </param>
        /// <param name="lastActionDateTime"> A combined UTC date and time string that describes the last modify time of the person group, large person group or large face list, could be null value when the group is not successfully trained. </param>
        /// <param name="lastSuccessfulTrainingDateTime"> A combined UTC date and time string that describes the last successful training time of the person group, large person group or large face list. </param>
        /// <param name="message"> Show failure message when training failed (omitted when training succeed). </param>
        /// <returns> A new <see cref="Face.FaceCollectionTrainingResult"/> instance for mocking. </returns>
        public static FaceCollectionTrainingResult FaceCollectionTrainingResult(FaceOperationStatus status = default, DateTimeOffset createdDateTime = default, DateTimeOffset lastActionDateTime = default, DateTimeOffset lastSuccessfulTrainingDateTime = default, string message = null)
        {
            return new FaceCollectionTrainingResult(
                status,
                createdDateTime,
                lastActionDateTime,
                lastSuccessfulTrainingDateTime,
                message,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LargeFaceListFace"/>. </summary>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="userData"> User-provided data attached to the face. The length limit is 1K. </param>
        /// <returns> A new <see cref="Face.LargeFaceListFace"/> instance for mocking. </returns>
        public static LargeFaceListFace LargeFaceListFace(string persistedFaceId = null, string userData = null)
        {
            return new LargeFaceListFace(persistedFaceId, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.PersonGroup"/>. </summary>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="recognitionModel"> Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds. </param>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <returns> A new <see cref="Face.PersonGroup"/> instance for mocking. </returns>
        public static PersonGroup PersonGroup(string name = null, string userData = null, FaceRecognitionModel? recognitionModel = null, string personGroupId = null)
        {
            return new PersonGroup(name, userData, recognitionModel, personGroupId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.CreatePersonResult"/>. </summary>
        /// <param name="personId"> Person ID of the person. </param>
        /// <returns> A new <see cref="Face.CreatePersonResult"/> instance for mocking. </returns>
        public static CreatePersonResult CreatePersonResult(string personId = null)
        {
            return new CreatePersonResult(personId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.PersonGroupPerson"/>. </summary>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="persistedFaceIds"> Face ids of registered faces in the person. </param>
        /// <returns> A new <see cref="Face.PersonGroupPerson"/> instance for mocking. </returns>
        public static PersonGroupPerson PersonGroupPerson(string personId = null, string name = null, string userData = null, IEnumerable<string> persistedFaceIds = null)
        {
            persistedFaceIds ??= new List<string>();

            return new PersonGroupPerson(personId, name, userData, persistedFaceIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.PersonGroupPersonFace"/>. </summary>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="userData"> User-provided data attached to the face. The length limit is 1K. </param>
        /// <returns> A new <see cref="Face.PersonGroupPersonFace"/> instance for mocking. </returns>
        public static PersonGroupPersonFace PersonGroupPersonFace(string persistedFaceId = null, string userData = null)
        {
            return new PersonGroupPersonFace(persistedFaceId, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LargePersonGroup"/>. </summary>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="recognitionModel"> Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds. </param>
        /// <param name="largePersonGroupId"> ID of the container. </param>
        /// <returns> A new <see cref="Face.LargePersonGroup"/> instance for mocking. </returns>
        public static LargePersonGroup LargePersonGroup(string name = null, string userData = null, FaceRecognitionModel? recognitionModel = null, string largePersonGroupId = null)
        {
            return new LargePersonGroup(name, userData, recognitionModel, largePersonGroupId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LargePersonGroupPerson"/>. </summary>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="persistedFaceIds"> Face ids of registered faces in the person. </param>
        /// <returns> A new <see cref="Face.LargePersonGroupPerson"/> instance for mocking. </returns>
        public static LargePersonGroupPerson LargePersonGroupPerson(string personId = null, string name = null, string userData = null, IEnumerable<string> persistedFaceIds = null)
        {
            persistedFaceIds ??= new List<string>();

            return new LargePersonGroupPerson(personId, name, userData, persistedFaceIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LargePersonGroupPersonFace"/>. </summary>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="userData"> User-provided data attached to the face. The length limit is 1K. </param>
        /// <returns> A new <see cref="Face.LargePersonGroupPersonFace"/> instance for mocking. </returns>
        public static LargePersonGroupPersonFace LargePersonGroupPersonFace(string persistedFaceId = null, string userData = null)
        {
            return new LargePersonGroupPersonFace(persistedFaceId, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.PersonDirectoryPerson"/>. </summary>
        /// <param name="personId"> Person ID of the person. </param>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <returns> A new <see cref="Face.PersonDirectoryPerson"/> instance for mocking. </returns>
        public static PersonDirectoryPerson PersonDirectoryPerson(string personId = null, string name = null, string userData = null)
        {
            return new PersonDirectoryPerson(personId, name, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.ListGroupReferenceResult"/>. </summary>
        /// <param name="dynamicPersonGroupIds"> Array of PersonDirectory DynamicPersonGroup ids. </param>
        /// <returns> A new <see cref="Face.ListGroupReferenceResult"/> instance for mocking. </returns>
        public static ListGroupReferenceResult ListGroupReferenceResult(IEnumerable<string> dynamicPersonGroupIds = null)
        {
            dynamicPersonGroupIds ??= new List<string>();

            return new ListGroupReferenceResult(dynamicPersonGroupIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.PersonDirectoryFace"/>. </summary>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="userData"> User-provided data attached to the face. The length limit is 1K. </param>
        /// <returns> A new <see cref="Face.PersonDirectoryFace"/> instance for mocking. </returns>
        public static PersonDirectoryFace PersonDirectoryFace(string persistedFaceId = null, string userData = null)
        {
            return new PersonDirectoryFace(persistedFaceId, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.ListFaceResult"/>. </summary>
        /// <param name="personId"> Id of person. </param>
        /// <param name="persistedFaceIds"> Array of persisted face ids. </param>
        /// <returns> A new <see cref="Face.ListFaceResult"/> instance for mocking. </returns>
        public static ListFaceResult ListFaceResult(string personId = null, IEnumerable<string> persistedFaceIds = null)
        {
            persistedFaceIds ??= new List<string>();

            return new ListFaceResult(personId, persistedFaceIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.DynamicPersonGroup"/>. </summary>
        /// <param name="dynamicPersonGroupId"> ID of the dynamic person group. </param>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <returns> A new <see cref="Face.DynamicPersonGroup"/> instance for mocking. </returns>
        public static DynamicPersonGroup DynamicPersonGroup(string dynamicPersonGroupId = null, string name = null, string userData = null)
        {
            return new DynamicPersonGroup(dynamicPersonGroupId, name, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.ListPersonResult"/>. </summary>
        /// <param name="personIds"> Array of PersonDirectory Person ids. </param>
        /// <returns> A new <see cref="Face.ListPersonResult"/> instance for mocking. </returns>
        public static ListPersonResult ListPersonResult(IEnumerable<string> personIds = null)
        {
            personIds ??= new List<string>();

            return new ListPersonResult(personIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSessionCreationContent"/>. </summary>
        /// <param name="livenessOperationMode"> Type of liveness mode the client should follow. </param>
        /// <param name="sendResultsToClient"> Whether or not to allow a '200 - Success' response body to be sent to the client, which may be undesirable for security reasons. Default is false, clients will receive a '204 - NoContent' empty body response. Regardless of selection, calling Session GetResult will always contain a response body enabling business logic to be implemented. </param>
        /// <param name="deviceCorrelationIdSetInClient"> Whether or not to allow client to set their own 'deviceCorrelationId' via the Vision SDK. Default is false, and 'deviceCorrelationId' must be set in this request body. </param>
        /// <param name="deviceCorrelationId"> Unique Guid per each end-user device. This is to provide rate limiting and anti-hammering. If 'deviceCorrelationIdSetInClient' is true in this request, this 'deviceCorrelationId' must be null. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Seconds the session should last for. Range is 60 to 86400 seconds. Default value is 600. </param>
        /// <returns> A new <see cref="Face.LivenessSessionCreationContent"/> instance for mocking. </returns>
        public static LivenessSessionCreationContent LivenessSessionCreationContent(LivenessOperationMode livenessOperationMode = default, bool? sendResultsToClient = null, bool? deviceCorrelationIdSetInClient = null, string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null)
        {
            return new LivenessSessionCreationContent(
                livenessOperationMode,
                sendResultsToClient,
                deviceCorrelationIdSetInClient,
                deviceCorrelationId,
                authTokenTimeToLiveInSeconds,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSessionCreationResult"/>. </summary>
        /// <param name="sessionId"> The unique session ID of the created session. It will expire 48 hours after it was created or may be deleted sooner using the corresponding Session DELETE operation. </param>
        /// <param name="authToken"> Bearer token to provide authentication for the Vision SDK running on a client application. This Bearer token has limited permissions to perform only the required action and expires after the TTL time. It is also auditable. </param>
        /// <returns> A new <see cref="Face.LivenessSessionCreationResult"/> instance for mocking. </returns>
        public static LivenessSessionCreationResult LivenessSessionCreationResult(string sessionId = null, string authToken = null)
        {
            return new LivenessSessionCreationResult(sessionId, authToken, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSession"/>. </summary>
        /// <param name="id"> The unique ID to reference this session. </param>
        /// <param name="createdDateTime"> DateTime when this session was created. </param>
        /// <param name="sessionStartDateTime"> DateTime when this session was started by the client. </param>
        /// <param name="sessionExpired"> Whether or not the session is expired. </param>
        /// <param name="deviceCorrelationId"> Unique Guid per each end-user device. This is to provide rate limiting and anti-hammering. If 'deviceCorrelationIdSetInClient' is true in this request, this 'deviceCorrelationId' must be null. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Seconds the session should last for. Range is 60 to 86400 seconds. Default value is 600. </param>
        /// <param name="status"> The current status of the session. </param>
        /// <param name="result"> The latest session audit result only populated if status == 'ResultAvailable'. </param>
        /// <returns> A new <see cref="Face.LivenessSession"/> instance for mocking. </returns>
        public static LivenessSession LivenessSession(string id = null, DateTimeOffset createdDateTime = default, DateTimeOffset? sessionStartDateTime = null, bool sessionExpired = default, string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null, FaceSessionStatus status = default, LivenessSessionAuditEntry result = null)
        {
            return new LivenessSession(
                id,
                createdDateTime,
                sessionStartDateTime,
                sessionExpired,
                deviceCorrelationId,
                authTokenTimeToLiveInSeconds,
                status,
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSessionAuditEntry"/>. </summary>
        /// <param name="id"> The unique id to refer to this audit request. Use this id with the 'start' query parameter to continue on to the next page of audit results. </param>
        /// <param name="sessionId"> The unique sessionId of the created session. It will expire 48 hours after it was created or may be deleted sooner using the corresponding session DELETE operation. </param>
        /// <param name="requestId"> The unique requestId that is returned by the service to the client in the 'apim-request-id' header. </param>
        /// <param name="clientRequestId"> The unique clientRequestId that is sent by the client in the 'client-request-id' header. </param>
        /// <param name="receivedDateTime"> The UTC DateTime that the request was received. </param>
        /// <param name="request"> The request of this entry. </param>
        /// <param name="response"> The response of this entry. </param>
        /// <param name="digest"> The server calculated digest for this request. If the client reported digest differs from the server calculated digest, then the message integrity between the client and service has been compromised and the result should not be trusted. For more information, see how to guides on how to leverage this value to secure your end-to-end solution. </param>
        /// <returns> A new <see cref="Face.LivenessSessionAuditEntry"/> instance for mocking. </returns>
        public static LivenessSessionAuditEntry LivenessSessionAuditEntry(long id = default, string sessionId = null, string requestId = null, string clientRequestId = null, DateTimeOffset receivedDateTime = default, SessionAuditEntryRequestInfo request = null, SessionAuditEntryResponseInfo response = null, string digest = null)
        {
            return new LivenessSessionAuditEntry(
                id,
                sessionId,
                requestId,
                clientRequestId,
                receivedDateTime,
                request,
                response,
                digest,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.SessionAuditEntryRequestInfo"/>. </summary>
        /// <param name="url"> The relative URL and query of the liveness request. </param>
        /// <param name="method"> The HTTP method of the request (i.e., GET, POST, DELETE). </param>
        /// <param name="contentLength"> The length of the request body in bytes. </param>
        /// <param name="contentType"> The content type of the request. </param>
        /// <param name="userAgent"> The user agent used to submit the request. </param>
        /// <returns> A new <see cref="Face.SessionAuditEntryRequestInfo"/> instance for mocking. </returns>
        public static SessionAuditEntryRequestInfo SessionAuditEntryRequestInfo(string url = null, string method = null, long? contentLength = null, string contentType = null, string userAgent = null)
        {
            return new SessionAuditEntryRequestInfo(
                url,
                method,
                contentLength,
                contentType,
                userAgent,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.SessionAuditEntryResponseInfo"/>. </summary>
        /// <param name="body"> The response body. The schema of this field will depend on the request.url and request.method used by the client. </param>
        /// <param name="statusCode"> The HTTP status code returned to the client. </param>
        /// <param name="latencyInMilliseconds"> The server measured latency for this request in milliseconds. </param>
        /// <returns> A new <see cref="Face.SessionAuditEntryResponseInfo"/> instance for mocking. </returns>
        public static SessionAuditEntryResponseInfo SessionAuditEntryResponseInfo(LivenessResponseBody body = null, int statusCode = default, long latencyInMilliseconds = default)
        {
            return new SessionAuditEntryResponseInfo(body, statusCode, latencyInMilliseconds, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessResponseBody"/>. </summary>
        /// <param name="livenessDecision"> The liveness classification for the target face. </param>
        /// <param name="target"> Specific targets used for liveness classification. </param>
        /// <param name="modelVersionUsed"> The model version used for liveness classification. </param>
        /// <param name="verifyResult"> The face verification output. Only available when the request is liveness with verify. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Face.LivenessResponseBody"/> instance for mocking. </returns>
        public static LivenessResponseBody LivenessResponseBody(FaceLivenessDecision? livenessDecision = null, LivenessOutputsTarget target = null, LivenessModel? modelVersionUsed = null, LivenessWithVerifyOutputs verifyResult = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new LivenessResponseBody(livenessDecision, target, modelVersionUsed, verifyResult, additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessOutputsTarget"/>. </summary>
        /// <param name="faceRectangle"> The face region where the liveness classification was made on. </param>
        /// <param name="fileName"> The file name which contains the face rectangle where the liveness classification was made on. </param>
        /// <param name="timeOffsetWithinFile"> The time offset within the file of the frame which contains the face rectangle where the liveness classification was made on. </param>
        /// <param name="imageType"> The image type which contains the face rectangle where the liveness classification was made on. </param>
        /// <returns> A new <see cref="Face.LivenessOutputsTarget"/> instance for mocking. </returns>
        public static LivenessOutputsTarget LivenessOutputsTarget(FaceRectangle faceRectangle = null, string fileName = null, int timeOffsetWithinFile = default, FaceImageType imageType = default)
        {
            return new LivenessOutputsTarget(faceRectangle, fileName, timeOffsetWithinFile, imageType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessWithVerifyOutputs"/>. </summary>
        /// <param name="verifyImage"> The detail of face for verification. </param>
        /// <param name="matchConfidence"> The target face liveness face and comparison image face verification confidence. </param>
        /// <param name="isIdentical"> Whether the target liveness face and comparison image face match. </param>
        /// <returns> A new <see cref="Face.LivenessWithVerifyOutputs"/> instance for mocking. </returns>
        public static LivenessWithVerifyOutputs LivenessWithVerifyOutputs(LivenessWithVerifyImage verifyImage = null, float matchConfidence = default, bool isIdentical = default)
        {
            return new LivenessWithVerifyOutputs(verifyImage, matchConfidence, isIdentical, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessWithVerifyImage"/>. </summary>
        /// <param name="faceRectangle"> The face region where the comparison image's classification was made. </param>
        /// <param name="qualityForRecognition"> Quality of face image for recognition. </param>
        /// <returns> A new <see cref="Face.LivenessWithVerifyImage"/> instance for mocking. </returns>
        public static LivenessWithVerifyImage LivenessWithVerifyImage(FaceRectangle faceRectangle = null, QualityForRecognition qualityForRecognition = default)
        {
            return new LivenessWithVerifyImage(faceRectangle, qualityForRecognition, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSessionItem"/>. </summary>
        /// <param name="id"> The unique ID to reference this session. </param>
        /// <param name="createdDateTime"> DateTime when this session was created. </param>
        /// <param name="sessionStartDateTime"> DateTime when this session was started by the client. </param>
        /// <param name="sessionExpired"> Whether or not the session is expired. </param>
        /// <param name="deviceCorrelationId"> Unique Guid per each end-user device. This is to provide rate limiting and anti-hammering. If 'deviceCorrelationIdSetInClient' is true in this request, this 'deviceCorrelationId' must be null. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Seconds the session should last for. Range is 60 to 86400 seconds. Default value is 600. </param>
        /// <returns> A new <see cref="Face.LivenessSessionItem"/> instance for mocking. </returns>
        public static LivenessSessionItem LivenessSessionItem(string id = null, DateTimeOffset createdDateTime = default, DateTimeOffset? sessionStartDateTime = null, bool sessionExpired = default, string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null)
        {
            return new LivenessSessionItem(
                id,
                createdDateTime,
                sessionStartDateTime,
                sessionExpired,
                deviceCorrelationId,
                authTokenTimeToLiveInSeconds,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessWithVerifySession"/>. </summary>
        /// <param name="id"> The unique ID to reference this session. </param>
        /// <param name="createdDateTime"> DateTime when this session was created. </param>
        /// <param name="sessionStartDateTime"> DateTime when this session was started by the client. </param>
        /// <param name="sessionExpired"> Whether or not the session is expired. </param>
        /// <param name="deviceCorrelationId"> Unique Guid per each end-user device. This is to provide rate limiting and anti-hammering. If 'deviceCorrelationIdSetInClient' is true in this request, this 'deviceCorrelationId' must be null. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Seconds the session should last for. Range is 60 to 86400 seconds. Default value is 600. </param>
        /// <param name="status"> The current status of the session. </param>
        /// <param name="result"> The latest session audit result only populated if status == 'ResultAvailable'. </param>
        /// <returns> A new <see cref="Face.LivenessWithVerifySession"/> instance for mocking. </returns>
        public static LivenessWithVerifySession LivenessWithVerifySession(string id = null, DateTimeOffset createdDateTime = default, DateTimeOffset? sessionStartDateTime = null, bool sessionExpired = default, string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null, FaceSessionStatus status = default, LivenessSessionAuditEntry result = null)
        {
            return new LivenessWithVerifySession(
                id,
                createdDateTime,
                sessionStartDateTime,
                sessionExpired,
                deviceCorrelationId,
                authTokenTimeToLiveInSeconds,
                status,
                result,
                serializedAdditionalRawData: null);
        }
    }
}
