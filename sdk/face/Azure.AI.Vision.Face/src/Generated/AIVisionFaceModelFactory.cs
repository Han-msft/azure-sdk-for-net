// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.AI.Vision.Face
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIVisionFaceModelFactory
    {
        /// <summary> Initializes a new instance of LivenessSessionItem. </summary>
        /// <param name="deviceCorrelationId"> Device Correlation Id to use for linking multiple sessions together. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Session length in seconds. Range is 60 to 86400 seconds. </param>
        /// <param name="livenessOperationMode"> The operation mode for the liveness modal. </param>
        /// <param name="id"> Unique ID to reference this session. </param>
        /// <param name="createdDateTime"> Session creation time in millisecond from epoch. </param>
        /// <param name="sessionStartDateTime"> Session started time from session auth token. </param>
        /// <param name="sessionExpired"> Whether or not the session is expired. </param>
        /// <returns> A new <see cref="Face.LivenessSessionItem"/> instance for mocking. </returns>
        public static LivenessSessionItem LivenessSessionItem(string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null, string livenessOperationMode = null, string id = null, DateTimeOffset createdDateTime = default, DateTimeOffset? sessionStartDateTime = null, bool sessionExpired = default)
        {
            return new LivenessSessionItem(deviceCorrelationId, authTokenTimeToLiveInSeconds, livenessOperationMode, id, createdDateTime, sessionStartDateTime, sessionExpired);
        }

        /// <summary> Initializes a new instance of LivenessSession. </summary>
        /// <param name="deviceCorrelationId"> Device Correlation Id to use for linking multiple sessions together. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Session length in seconds. Range is 60 to 86400 seconds. </param>
        /// <param name="livenessOperationMode"> The operation mode for the liveness modal. </param>
        /// <param name="id"> Unique ID to reference this session. </param>
        /// <param name="createdDateTime"> Session creation time in millisecond from epoch. </param>
        /// <param name="sessionStartDateTime"> Session started time from session auth token. </param>
        /// <param name="sessionExpired"> Whether or not the session is expired. </param>
        /// <param name="status"> The session status. </param>
        /// <param name="result"> The last result of session. </param>
        /// <returns> A new <see cref="Face.LivenessSession"/> instance for mocking. </returns>
        public static LivenessSession LivenessSession(string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null, string livenessOperationMode = null, string id = null, DateTimeOffset createdDateTime = default, DateTimeOffset? sessionStartDateTime = null, bool sessionExpired = default, SessionStatus status = default, LivenessSessionAuditEntry result = null)
        {
            return new LivenessSession(deviceCorrelationId, authTokenTimeToLiveInSeconds, livenessOperationMode, id, createdDateTime, sessionStartDateTime, sessionExpired, status, result);
        }

        /// <summary> Initializes a new instance of LivenessSessionAuditEntry. </summary>
        /// <param name="id"> ID of this audit entry. </param>
        /// <param name="sessionId"> Session ID of this audit entry. </param>
        /// <param name="requestId"> Request ID in the request header. </param>
        /// <param name="clientRequestId"> Client request ID in the request header. </param>
        /// <param name="receivedDateTime"> The UTC date time of the request. </param>
        /// <param name="request"> The request of this entry. </param>
        /// <param name="response"> The response of this entry. </param>
        /// <param name="digest"> The digest of the request body. </param>
        /// <returns> A new <see cref="Face.LivenessSessionAuditEntry"/> instance for mocking. </returns>
        public static LivenessSessionAuditEntry LivenessSessionAuditEntry(long id = default, string sessionId = null, string requestId = null, string clientRequestId = null, DateTimeOffset receivedDateTime = default, SessionAuditEntryRequestInfo request = null, SessionAuditEntryResponseInfo response = null, string digest = null)
        {
            return new LivenessSessionAuditEntry(id, sessionId, requestId, clientRequestId, receivedDateTime, request, response, digest);
        }

        /// <summary> Initializes a new instance of LivenessWithVerifySession. </summary>
        /// <param name="deviceCorrelationId"> Device Correlation Id to use for linking multiple sessions together. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Session length in seconds. Range is 60 to 86400 seconds. </param>
        /// <param name="livenessOperationMode"> The operation mode for the liveness modal. </param>
        /// <param name="id"> Unique ID to reference this session. </param>
        /// <param name="createdDateTime"> Session creation time in millisecond from epoch. </param>
        /// <param name="sessionStartDateTime"> Session started time from session auth token. </param>
        /// <param name="sessionExpired"> Whether or not the session is expired. </param>
        /// <param name="status"> The session status. </param>
        /// <param name="result"> The last result of session. </param>
        /// <returns> A new <see cref="Face.LivenessWithVerifySession"/> instance for mocking. </returns>
        public static LivenessWithVerifySession LivenessWithVerifySession(string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null, string livenessOperationMode = null, string id = null, DateTimeOffset createdDateTime = default, DateTimeOffset? sessionStartDateTime = null, bool sessionExpired = default, SessionStatus status = default, LivenessWithVerifySessionAuditEntry result = null)
        {
            return new LivenessWithVerifySession(deviceCorrelationId, authTokenTimeToLiveInSeconds, livenessOperationMode, id, createdDateTime, sessionStartDateTime, sessionExpired, status, result);
        }

        /// <summary> Initializes a new instance of LivenessWithVerifySessionAuditEntry. </summary>
        /// <param name="id"> ID of this audit entry. </param>
        /// <param name="sessionId"> Session ID of this audit entry. </param>
        /// <param name="requestId"> Request ID in the request header. </param>
        /// <param name="clientRequestId"> Client request ID in the request header. </param>
        /// <param name="receivedDateTime"> The UTC date time of the request. </param>
        /// <param name="request"> The request of this entry. </param>
        /// <param name="response"> The response of this entry. </param>
        /// <param name="digest"> The digest of the request body. </param>
        /// <returns> A new <see cref="Face.LivenessWithVerifySessionAuditEntry"/> instance for mocking. </returns>
        public static LivenessWithVerifySessionAuditEntry LivenessWithVerifySessionAuditEntry(long id = default, string sessionId = null, string requestId = null, string clientRequestId = null, DateTimeOffset receivedDateTime = default, SessionAuditEntryRequestInfo request = null, SessionAuditEntryResponseInfo response = null, string digest = null)
        {
            return new LivenessWithVerifySessionAuditEntry(id, sessionId, requestId, clientRequestId, receivedDateTime, request, response, digest);
        }

        /// <summary> Initializes a new instance of LivenessSessionCreationResult. </summary>
        /// <param name="sessionId"> Unique ID to reference this session. </param>
        /// <param name="authToken"> Authorization token for use by the client application. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> or <paramref name="authToken"/> is null. </exception>
        /// <returns> A new <see cref="Face.LivenessSessionCreationResult"/> instance for mocking. </returns>
        public static LivenessSessionCreationResult LivenessSessionCreationResult(string sessionId = null, string authToken = null)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (authToken == null)
            {
                throw new ArgumentNullException(nameof(authToken));
            }

            return new LivenessSessionCreationResult(sessionId, authToken);
        }
    }
}
