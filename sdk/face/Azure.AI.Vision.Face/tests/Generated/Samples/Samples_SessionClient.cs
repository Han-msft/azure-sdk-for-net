// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Vision.Face;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Vision.Face.Samples
{
    public partial class Samples_SessionClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLivenessSession_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                deviceCorrelationId = "<deviceCorrelationId>",
                livenessOperationMode = "<livenessOperationMode>",
            });
            Response response = client.CreateLivenessSession(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("authToken").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLivenessSession_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                deviceCorrelationId = "<deviceCorrelationId>",
                livenessOperationMode = "<livenessOperationMode>",
            });
            Response response = await client.CreateLivenessSessionAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("authToken").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLivenessSession_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            LivenessSessionCreationContent livenessSessionCreationContent = new LivenessSessionCreationContent("<deviceCorrelationId>", "<livenessOperationMode>");
            Response<LivenessSessionCreationResult> response = client.CreateLivenessSession(livenessSessionCreationContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLivenessSession_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            LivenessSessionCreationContent livenessSessionCreationContent = new LivenessSessionCreationContent("<deviceCorrelationId>", "<livenessOperationMode>");
            Response<LivenessSessionCreationResult> response = await client.CreateLivenessSessionAsync(livenessSessionCreationContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLivenessSession_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                deviceCorrelationId = "<deviceCorrelationId>",
                authTokenTimeToLiveInSeconds = 1234,
                livenessOperationMode = "<livenessOperationMode>",
            });
            Response response = client.CreateLivenessSession(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("authToken").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLivenessSession_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                deviceCorrelationId = "<deviceCorrelationId>",
                authTokenTimeToLiveInSeconds = 1234,
                livenessOperationMode = "<livenessOperationMode>",
            });
            Response response = await client.CreateLivenessSessionAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("authToken").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLivenessSession_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            LivenessSessionCreationContent livenessSessionCreationContent = new LivenessSessionCreationContent("<deviceCorrelationId>", "<livenessOperationMode>")
            {
                AuthTokenTimeToLiveInSeconds = 1234,
            };
            Response<LivenessSessionCreationResult> response = client.CreateLivenessSession(livenessSessionCreationContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLivenessSession_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            LivenessSessionCreationContent livenessSessionCreationContent = new LivenessSessionCreationContent("<deviceCorrelationId>", "<livenessOperationMode>")
            {
                AuthTokenTimeToLiveInSeconds = 1234,
            };
            Response<LivenessSessionCreationResult> response = await client.CreateLivenessSessionAsync(livenessSessionCreationContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessSession_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.GetLivenessSession("<sessionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("sessionExpired").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result.GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessSession_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.GetLivenessSessionAsync("<sessionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("sessionExpired").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result.GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessSession_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<LivenessSession> response = client.GetLivenessSession("<sessionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessSession_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<LivenessSession> response = await client.GetLivenessSessionAsync("<sessionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessSession_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.GetLivenessSession("<sessionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("sessionStartDateTime").ToString());
            Console.WriteLine(result.GetProperty("sessionExpired").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("requestId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("clientRequestId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("receivedDateTime").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("method").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("contentLength").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("contentType").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("userAgent").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("response").GetProperty("body").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("response").GetProperty("statusCode").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("response").GetProperty("latencyInMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("digest").ToString());
            Console.WriteLine(result.GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result.GetProperty("authTokenTimeToLiveInSeconds").ToString());
            Console.WriteLine(result.GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessSession_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.GetLivenessSessionAsync("<sessionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("sessionStartDateTime").ToString());
            Console.WriteLine(result.GetProperty("sessionExpired").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("requestId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("clientRequestId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("receivedDateTime").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("method").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("contentLength").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("contentType").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("userAgent").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("response").GetProperty("body").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("response").GetProperty("statusCode").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("response").GetProperty("latencyInMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("digest").ToString());
            Console.WriteLine(result.GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result.GetProperty("authTokenTimeToLiveInSeconds").ToString());
            Console.WriteLine(result.GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessSession_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<LivenessSession> response = client.GetLivenessSession("<sessionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessSession_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<LivenessSession> response = await client.GetLivenessSessionAsync("<sessionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteLivenessSession_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.DeleteLivenessSession("<sessionId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteLivenessSession_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.DeleteLivenessSessionAsync("<sessionId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteLivenessSession_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.DeleteLivenessSession("<sessionId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteLivenessSession_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.DeleteLivenessSessionAsync("<sessionId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessSessions_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.GetLivenessSessions(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("createdDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("sessionExpired").ToString());
            Console.WriteLine(result[0].GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result[0].GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessSessions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.GetLivenessSessionsAsync(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("createdDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("sessionExpired").ToString());
            Console.WriteLine(result[0].GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result[0].GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessSessions_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessSessionItem>> response = client.GetLivenessSessions();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessSessions_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessSessionItem>> response = await client.GetLivenessSessionsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessSessions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.GetLivenessSessions("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("createdDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("sessionStartDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("sessionExpired").ToString());
            Console.WriteLine(result[0].GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result[0].GetProperty("authTokenTimeToLiveInSeconds").ToString());
            Console.WriteLine(result[0].GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessSessions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.GetLivenessSessionsAsync("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("createdDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("sessionStartDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("sessionExpired").ToString());
            Console.WriteLine(result[0].GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result[0].GetProperty("authTokenTimeToLiveInSeconds").ToString());
            Console.WriteLine(result[0].GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessSessions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessSessionItem>> response = client.GetLivenessSessions(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessSessions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessSessionItem>> response = await client.GetLivenessSessionsAsync(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessSessionAuditEntries_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.GetLivenessSessionAuditEntries("<sessionId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("sessionId").ToString());
            Console.WriteLine(result[0].GetProperty("requestId").ToString());
            Console.WriteLine(result[0].GetProperty("clientRequestId").ToString());
            Console.WriteLine(result[0].GetProperty("receivedDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("method").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("contentType").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("body").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("statusCode").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("latencyInMilliseconds").ToString());
            Console.WriteLine(result[0].GetProperty("digest").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessSessionAuditEntries_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.GetLivenessSessionAuditEntriesAsync("<sessionId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("sessionId").ToString());
            Console.WriteLine(result[0].GetProperty("requestId").ToString());
            Console.WriteLine(result[0].GetProperty("clientRequestId").ToString());
            Console.WriteLine(result[0].GetProperty("receivedDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("method").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("contentType").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("body").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("statusCode").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("latencyInMilliseconds").ToString());
            Console.WriteLine(result[0].GetProperty("digest").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessSessionAuditEntries_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessSessionAuditEntry>> response = client.GetLivenessSessionAuditEntries("<sessionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessSessionAuditEntries_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessSessionAuditEntry>> response = await client.GetLivenessSessionAuditEntriesAsync("<sessionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessSessionAuditEntries_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.GetLivenessSessionAuditEntries("<sessionId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("sessionId").ToString());
            Console.WriteLine(result[0].GetProperty("requestId").ToString());
            Console.WriteLine(result[0].GetProperty("clientRequestId").ToString());
            Console.WriteLine(result[0].GetProperty("receivedDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("method").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("contentLength").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("contentType").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("userAgent").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("body").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("statusCode").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("latencyInMilliseconds").ToString());
            Console.WriteLine(result[0].GetProperty("digest").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessSessionAuditEntries_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.GetLivenessSessionAuditEntriesAsync("<sessionId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("sessionId").ToString());
            Console.WriteLine(result[0].GetProperty("requestId").ToString());
            Console.WriteLine(result[0].GetProperty("clientRequestId").ToString());
            Console.WriteLine(result[0].GetProperty("receivedDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("method").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("contentLength").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("contentType").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("userAgent").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("body").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("statusCode").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("latencyInMilliseconds").ToString());
            Console.WriteLine(result[0].GetProperty("digest").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessSessionAuditEntries_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessSessionAuditEntry>> response = client.GetLivenessSessionAuditEntries("<sessionId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessSessionAuditEntries_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessSessionAuditEntry>> response = await client.GetLivenessSessionAuditEntriesAsync("<sessionId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLivenessWithVerifySessionByFormData_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                Parameters = new
                {
                    deviceCorrelationId = "<deviceCorrelationId>",
                    livenessOperationMode = "<livenessOperationMode>",
                },
                VerifyImage = new object(),
            });
            Response response = client.CreateLivenessWithVerifySessionByFormData(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("authToken").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLivenessWithVerifySessionByFormData_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                Parameters = new
                {
                    deviceCorrelationId = "<deviceCorrelationId>",
                    livenessOperationMode = "<livenessOperationMode>",
                },
                VerifyImage = new object(),
            });
            Response response = await client.CreateLivenessWithVerifySessionByFormDataAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("authToken").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLivenessWithVerifySessionByFormData_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            LivenessWithVerifySessionCreationContent livenessWithVerifySessionCreationContent = new LivenessWithVerifySessionCreationContent(new LivenessSessionCreationContent("<deviceCorrelationId>", "<livenessOperationMode>"), BinaryData.FromObjectAsJson(new object()));
            Response<LivenessSessionCreationResult> response = client.CreateLivenessWithVerifySessionByFormData(livenessWithVerifySessionCreationContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLivenessWithVerifySessionByFormData_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            LivenessWithVerifySessionCreationContent livenessWithVerifySessionCreationContent = new LivenessWithVerifySessionCreationContent(new LivenessSessionCreationContent("<deviceCorrelationId>", "<livenessOperationMode>"), BinaryData.FromObjectAsJson(new object()));
            Response<LivenessSessionCreationResult> response = await client.CreateLivenessWithVerifySessionByFormDataAsync(livenessWithVerifySessionCreationContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLivenessWithVerifySessionByFormData_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                Parameters = new
                {
                    deviceCorrelationId = "<deviceCorrelationId>",
                    authTokenTimeToLiveInSeconds = 1234,
                    livenessOperationMode = "<livenessOperationMode>",
                },
                VerifyImage = new object(),
            });
            Response response = client.CreateLivenessWithVerifySessionByFormData(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("authToken").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLivenessWithVerifySessionByFormData_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                Parameters = new
                {
                    deviceCorrelationId = "<deviceCorrelationId>",
                    authTokenTimeToLiveInSeconds = 1234,
                    livenessOperationMode = "<livenessOperationMode>",
                },
                VerifyImage = new object(),
            });
            Response response = await client.CreateLivenessWithVerifySessionByFormDataAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("authToken").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLivenessWithVerifySessionByFormData_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            LivenessWithVerifySessionCreationContent livenessWithVerifySessionCreationContent = new LivenessWithVerifySessionCreationContent(new LivenessSessionCreationContent("<deviceCorrelationId>", "<livenessOperationMode>")
            {
                AuthTokenTimeToLiveInSeconds = 1234,
            }, BinaryData.FromObjectAsJson(new object()));
            Response<LivenessSessionCreationResult> response = client.CreateLivenessWithVerifySessionByFormData(livenessWithVerifySessionCreationContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLivenessWithVerifySessionByFormData_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            LivenessWithVerifySessionCreationContent livenessWithVerifySessionCreationContent = new LivenessWithVerifySessionCreationContent(new LivenessSessionCreationContent("<deviceCorrelationId>", "<livenessOperationMode>")
            {
                AuthTokenTimeToLiveInSeconds = 1234,
            }, BinaryData.FromObjectAsJson(new object()));
            Response<LivenessSessionCreationResult> response = await client.CreateLivenessWithVerifySessionByFormDataAsync(livenessWithVerifySessionCreationContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLivenessWithVerifySessionByJson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                deviceCorrelationId = "<deviceCorrelationId>",
                livenessOperationMode = "<livenessOperationMode>",
            });
            Response response = client.CreateLivenessWithVerifySessionByJson(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("authToken").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLivenessWithVerifySessionByJson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                deviceCorrelationId = "<deviceCorrelationId>",
                livenessOperationMode = "<livenessOperationMode>",
            });
            Response response = await client.CreateLivenessWithVerifySessionByJsonAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("authToken").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLivenessWithVerifySessionByJson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            LivenessSessionCreationContent livenessSessionCreationContent = new LivenessSessionCreationContent("<deviceCorrelationId>", "<livenessOperationMode>");
            Response<LivenessSessionCreationResult> response = client.CreateLivenessWithVerifySessionByJson(livenessSessionCreationContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLivenessWithVerifySessionByJson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            LivenessSessionCreationContent livenessSessionCreationContent = new LivenessSessionCreationContent("<deviceCorrelationId>", "<livenessOperationMode>");
            Response<LivenessSessionCreationResult> response = await client.CreateLivenessWithVerifySessionByJsonAsync(livenessSessionCreationContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLivenessWithVerifySessionByJson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                deviceCorrelationId = "<deviceCorrelationId>",
                authTokenTimeToLiveInSeconds = 1234,
                livenessOperationMode = "<livenessOperationMode>",
            });
            Response response = client.CreateLivenessWithVerifySessionByJson(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("authToken").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLivenessWithVerifySessionByJson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                deviceCorrelationId = "<deviceCorrelationId>",
                authTokenTimeToLiveInSeconds = 1234,
                livenessOperationMode = "<livenessOperationMode>",
            });
            Response response = await client.CreateLivenessWithVerifySessionByJsonAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("authToken").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLivenessWithVerifySessionByJson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            LivenessSessionCreationContent livenessSessionCreationContent = new LivenessSessionCreationContent("<deviceCorrelationId>", "<livenessOperationMode>")
            {
                AuthTokenTimeToLiveInSeconds = 1234,
            };
            Response<LivenessSessionCreationResult> response = client.CreateLivenessWithVerifySessionByJson(livenessSessionCreationContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLivenessWithVerifySessionByJson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            LivenessSessionCreationContent livenessSessionCreationContent = new LivenessSessionCreationContent("<deviceCorrelationId>", "<livenessOperationMode>")
            {
                AuthTokenTimeToLiveInSeconds = 1234,
            };
            Response<LivenessSessionCreationResult> response = await client.CreateLivenessWithVerifySessionByJsonAsync(livenessSessionCreationContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessWithVerifySession_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.GetLivenessWithVerifySession("<sessionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("sessionExpired").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result.GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessWithVerifySession_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.GetLivenessWithVerifySessionAsync("<sessionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("sessionExpired").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result.GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessWithVerifySession_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<LivenessWithVerifySession> response = client.GetLivenessWithVerifySession("<sessionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessWithVerifySession_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<LivenessWithVerifySession> response = await client.GetLivenessWithVerifySessionAsync("<sessionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessWithVerifySession_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.GetLivenessWithVerifySession("<sessionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("sessionStartDateTime").ToString());
            Console.WriteLine(result.GetProperty("sessionExpired").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("requestId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("clientRequestId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("receivedDateTime").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("method").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("contentLength").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("contentType").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("userAgent").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("response").GetProperty("body").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("response").GetProperty("statusCode").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("response").GetProperty("latencyInMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("digest").ToString());
            Console.WriteLine(result.GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result.GetProperty("authTokenTimeToLiveInSeconds").ToString());
            Console.WriteLine(result.GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessWithVerifySession_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.GetLivenessWithVerifySessionAsync("<sessionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("sessionStartDateTime").ToString());
            Console.WriteLine(result.GetProperty("sessionExpired").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("requestId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("clientRequestId").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("receivedDateTime").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("method").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("contentLength").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("contentType").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("request").GetProperty("userAgent").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("response").GetProperty("body").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("response").GetProperty("statusCode").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("response").GetProperty("latencyInMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("result").GetProperty("digest").ToString());
            Console.WriteLine(result.GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result.GetProperty("authTokenTimeToLiveInSeconds").ToString());
            Console.WriteLine(result.GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessWithVerifySession_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<LivenessWithVerifySession> response = client.GetLivenessWithVerifySession("<sessionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessWithVerifySession_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<LivenessWithVerifySession> response = await client.GetLivenessWithVerifySessionAsync("<sessionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteLivenessWithVerifySession_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.DeleteLivenessWithVerifySession("<sessionId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteLivenessWithVerifySession_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.DeleteLivenessWithVerifySessionAsync("<sessionId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteLivenessWithVerifySession_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.DeleteLivenessWithVerifySession("<sessionId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteLivenessWithVerifySession_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.DeleteLivenessWithVerifySessionAsync("<sessionId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessWithVerifySessions_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.GetLivenessWithVerifySessions(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("createdDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("sessionExpired").ToString());
            Console.WriteLine(result[0].GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result[0].GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessWithVerifySessions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.GetLivenessWithVerifySessionsAsync(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("createdDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("sessionExpired").ToString());
            Console.WriteLine(result[0].GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result[0].GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessWithVerifySessions_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessSessionItem>> response = client.GetLivenessWithVerifySessions();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessWithVerifySessions_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessSessionItem>> response = await client.GetLivenessWithVerifySessionsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessWithVerifySessions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.GetLivenessWithVerifySessions("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("createdDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("sessionStartDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("sessionExpired").ToString());
            Console.WriteLine(result[0].GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result[0].GetProperty("authTokenTimeToLiveInSeconds").ToString());
            Console.WriteLine(result[0].GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessWithVerifySessions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.GetLivenessWithVerifySessionsAsync("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("createdDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("sessionStartDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("sessionExpired").ToString());
            Console.WriteLine(result[0].GetProperty("deviceCorrelationId").ToString());
            Console.WriteLine(result[0].GetProperty("authTokenTimeToLiveInSeconds").ToString());
            Console.WriteLine(result[0].GetProperty("livenessOperationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessWithVerifySessions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessSessionItem>> response = client.GetLivenessWithVerifySessions(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessWithVerifySessions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessSessionItem>> response = await client.GetLivenessWithVerifySessionsAsync(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessWithVerifySessionAuditEntries_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.GetLivenessWithVerifySessionAuditEntries("<sessionId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("sessionId").ToString());
            Console.WriteLine(result[0].GetProperty("requestId").ToString());
            Console.WriteLine(result[0].GetProperty("clientRequestId").ToString());
            Console.WriteLine(result[0].GetProperty("receivedDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("method").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("contentType").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("body").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("statusCode").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("latencyInMilliseconds").ToString());
            Console.WriteLine(result[0].GetProperty("digest").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessWithVerifySessionAuditEntries_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.GetLivenessWithVerifySessionAuditEntriesAsync("<sessionId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("sessionId").ToString());
            Console.WriteLine(result[0].GetProperty("requestId").ToString());
            Console.WriteLine(result[0].GetProperty("clientRequestId").ToString());
            Console.WriteLine(result[0].GetProperty("receivedDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("method").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("contentType").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("body").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("statusCode").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("latencyInMilliseconds").ToString());
            Console.WriteLine(result[0].GetProperty("digest").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessWithVerifySessionAuditEntries_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessWithVerifySessionAuditEntry>> response = client.GetLivenessWithVerifySessionAuditEntries("<sessionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessWithVerifySessionAuditEntries_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessWithVerifySessionAuditEntry>> response = await client.GetLivenessWithVerifySessionAuditEntriesAsync("<sessionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessWithVerifySessionAuditEntries_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = client.GetLivenessWithVerifySessionAuditEntries("<sessionId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("sessionId").ToString());
            Console.WriteLine(result[0].GetProperty("requestId").ToString());
            Console.WriteLine(result[0].GetProperty("clientRequestId").ToString());
            Console.WriteLine(result[0].GetProperty("receivedDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("method").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("contentLength").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("contentType").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("userAgent").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("body").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("statusCode").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("latencyInMilliseconds").ToString());
            Console.WriteLine(result[0].GetProperty("digest").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessWithVerifySessionAuditEntries_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response response = await client.GetLivenessWithVerifySessionAuditEntriesAsync("<sessionId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("sessionId").ToString());
            Console.WriteLine(result[0].GetProperty("requestId").ToString());
            Console.WriteLine(result[0].GetProperty("clientRequestId").ToString());
            Console.WriteLine(result[0].GetProperty("receivedDateTime").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("method").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("contentLength").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("contentType").ToString());
            Console.WriteLine(result[0].GetProperty("request").GetProperty("userAgent").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("body").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("statusCode").ToString());
            Console.WriteLine(result[0].GetProperty("response").GetProperty("latencyInMilliseconds").ToString());
            Console.WriteLine(result[0].GetProperty("digest").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLivenessWithVerifySessionAuditEntries_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessWithVerifySessionAuditEntry>> response = client.GetLivenessWithVerifySessionAuditEntries("<sessionId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLivenessWithVerifySessionAuditEntries_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SessionClient client = new SessionClient(endpoint, credential);

            Response<IReadOnlyList<LivenessWithVerifySessionAuditEntry>> response = await client.GetLivenessWithVerifySessionAuditEntriesAsync("<sessionId>", start: "<start>", top: 1234);
        }
    }
}
